tap:
  docker:
    registry: docker.io/kubeshark
    tag: ""
    imagePullPolicy: Always
    imagePullSecrets: []
  proxy:
    worker:
      srvPort: 30001
    hub:
      srvPort: 8898
    front:
      port: 8899
    host: 127.0.0.1
  regex: .*
  namespaces: []
  release:
    repo: https://helm.kubeshark.co
    name: kubeshark
    namespace: default
  persistentStorage: false
  persistentStorageStatic: false
  efsFileSytemIdAndPath: ""
  storageLimit: 500Mi
  storageClass: standard
  dryRun: false
  resources:
    hub:
      limits:
        cpu: 750m
        memory: 1Gi
      requests:
        cpu: 50m
        memory: 50Mi
    sniffer:
      limits:
        cpu: 750m
        memory: 1Gi
      requests:
        cpu: 50m
        memory: 50Mi
    tracer:
      limits:
        cpu: 750m
        memory: 1Gi
      requests:
        cpu: 50m
        memory: 50Mi
  serviceMesh: true
  tls: true
  packetCapture: best
  ignoreTainted: false
  labels: {}
  annotations: {}
  nodeSelectorTerms:
  - matchExpressions:
    - key: kubernetes.io/os
      operator: In
      values:
      - linux
  auth:
    enabled: false
    type: saml
    saml:
      idpMetadataUrl: ""
      x509crt: ""
      x509key: ""
      roleAttribute: role
      roles:
        admin:
          filter: ""
          canReplayTraffic: true
          canDownloadPCAP: true
          canUseScripting: true
          canUpdateTargetedPods: true
          showAdminConsoleLink: true
  ingress:
    enabled: false
    className: ""
    host: ks.svc.cluster.local
    tls: []
    annotations: {}
  ipv6: true
  debug: false
  kernelModule:
    enabled: true
    image: kubeshark/pf-ring-module:all
    unloadOnDestroy: false
  telemetry:
    enabled: true
  defaultFilter: ""
  replayDisabled: false
  scriptingDisabled: false
  targetedPodsUpdateDisabled: false
  recordingDisabled: false
  capabilities:
    networkCapture:
    - NET_RAW
    - NET_ADMIN
    serviceMeshCapture:
    - SYS_ADMIN
    - SYS_PTRACE
    - DAC_OVERRIDE
    kernelModule:
    - SYS_MODULE
    ebpfCapture:
    - SYS_ADMIN
    - SYS_PTRACE
    - SYS_RESOURCE
    - IPC_LOCK
  globalFilter: ""
  metrics:
    port: 49100
  misc:
    jsonTTL: 5m
    pcapTTL: 10s
    pcapErrorTTL: 60s
    trafficSampleRate: 100
    tcpStreamChannelTimeoutMs: 10000
    tcpStreamChannelTimeoutShow: false
logs:
  file: ""
kube:
  configPath: ""
  context: ""
dumpLogs: false
headless: false
license: ""
scripting:
  env: {}
  source: ""
  watchScripts: true
timezone: ""


aether:
  atroposSubscriptions:
    enableV2: true
    manual-derived-bundle-status-140793-subscription:
      config:
        lag.threshold: '3'
        max.retry.count: '3'
        secret: zrn:zeta:delta:140793:SECRET:aether.aether.ATROPOS_WEBHOOK_SECRET
        webhook.auth.crux.app: aether
        webhook.auth.crux.cluster: aether
        subscriber: aether
      crName: subscription-140793-aether-association-manual-derived-bundle-status
      eventName: association_CREATED
      state: ACTIVE
      subscriber: aether
      subscriptionID: subscription_140793_aether_association_manual_derived_bundleStatus
      subscriptionType: WEBHOOK
      tenantID: 140793
      tenantCode: rbl
      topic: _tenant_140793_association
      contactInfo: { "cluster": "aether" }
      transformerJS: "function transform(payload, sender){    var transformedResult\
        \ = {};\tvar accountHolderObjectType = 'in.zeta.ruby';    var accountObjectType\
        \ = 'in.zeta.mars';    var entityMapping = {    \t'in.zeta.ruby': 'Account',\
        \    \t'in.zeta.mars': 'AccountHolder',    };    if (!payload.data || !payload.data.objectType)\
        \ {        return '';    }    var objectType = payload.data.objectType;  \
        \  var transformedResult = {};    if (objectType.startsWith(accountHolderObjectType))\
        \ {        transformedResult.entityType = entityMapping[accountHolderObjectType];\
        \        transformedResult.entityId = payload.data.objectId;    } else if\
        \ (objectType.startsWith(accountObjectType)) {        transformedResult.entityType\
        \ = entityMapping[accountObjectType];        transformedResult.entityId =\
        \ payload.data.objectId;    } else {        return '';    }    transformedResult.eventId\
        \ = payload.eventID;    transformedResult.ifiId = payload.data.classificationUnit.tenantId;\
        \    transformedResult.eventName = payload.name;    transformedResult.originTime\
        \ = payload.origin.time;    transformedResult.classificationModelId = payload.data.classificationUnit.classificationModelId;\
        \    transformedResult.statusValue = payload.data.classificationUnit.code;\
        \    var modelCodeMapping = [        {            bundleStatusModelCode: 'manualBundleStatusBankruptcy',\
        \            bundleStatus: 'MBBK1',            classificationModel: 'BANKRUPTCY',\
        \            classificationUnit: 'BankruptcyInitiated'        },        {\
        \                    bundleStatusModelCode: 'manualBundleStatusBankruptcy',\
        \                    bundleStatus: 'MBBK2',                    classificationModel:\
        \ 'BANKRUPTCY',                    classificationUnit: 'BankruptcyClosed'\
        \        },        {                    bundleStatusModelCode: 'manualBundleStatusBankruptcy',\
        \                    bundleStatus: 'MBBK3',                    classificationModel:\
        \ 'BANKRUPTCY',                    classificationUnit: 'BankruptcyDismissed'\
        \        },        {                    bundleStatusModelCode: 'manualBundleStatusBankruptcy',\
        \                    bundleStatus: 'MBBK4',                    classificationModel:\
        \ 'BANKRUPTCY',                    classificationUnit: 'BankruptcyDischarged'\
        \        },        {                    bundleStatusModelCode: 'manualBundleStatusBankruptcy',\
        \                    bundleStatus: 'MBBK5',                    classificationModel:\
        \ 'BANKRUPTCY',                    classificationUnit: 'BankruptcyWithdrawn'\
        \        },        {                    bundleStatusModelCode: 'manualBundleStatusDeceased',\
        \                    bundleStatus: 'MBAD1',                    classificationModel:\
        \ 'DECEASE',                    classificationUnit: 'I'        },        {\
        \                    bundleStatusModelCode: 'manualBundleStatusDeceased',\
        \                    bundleStatus: 'MBAD2',                    classificationModel:\
        \ 'DECEASE',                    classificationUnit: 'Y'        },    ];  \
        \  transformedResult.modelCodeMapping = modelCodeMapping;    payload.transformedResult\
        \ = transformedResult;    return JSON.stringify(payload);}"
      webhookURL: "<%= zoneClusterConfig.aetherBaseUrl %>/tenants/140793/hook/handle/event/manualStatusChange"
    aether-bundle-creation-140793-subscription:
      config:
        subscriber: aether
        max.retry.count: '0'
        lag.threshold: '5'
        cronus.bed.code: "aether.aether.BEDZZZZ0002"
        secret: zrn:zeta:delta:140793:SECRET:aether.aether.ATROPOS_WEBHOOK_SECRET
        webhook.auth.crux.app: aether
        webhook.auth.crux.cluster: aether
      filters:
        - EVENT_NAME:
            - type: 'REGEX'
              value: 'BUNDLE_FormFactor_CREATED'
            - type: 'REGEX'
              value: 'BUNDLE_CardActivationRetry_CREATED'
      crName: "subscription_140793_aether-bundle-created"
      eventName: "*"
      state: ACTIVE
      subscriber: aether
      subscriptionID: "subscription_140793_bundle_created"
      subscriptionType: WEBHOOK
      tenantID: 140793
      tenantCode: rbl
      contactInfo: { "cluster": "aether" }
      topic: "_tenant_140793_BUNDLE"
      transformerJS: "function transform(payload, sender) { return JSON.stringify(payload);}"
      webhookRequest: "{ 'method': 'POST','url': '<%=zoneClusterConfig.aetherBaseUrl%>/tenants/140793/<%=zoneClusterConfig.bundleIssuanceWebhookUrl%>','postData': { 'mineType': 'application/json','text': '<%print(generateRequestBody(payload.data));%>' } }"
    aether-association-creation-140793-subscription:
      subscriptionType: "WEBHOOK"
      subscriptionID: "subscription_140793_aether_association_manual_bundle_status_updated"
      topic: "_tenant_140793_association"
      crName: "subscription_140793_aether-association-manual-bundle-status-updated"
      eventName: 'association_CREATED'
      subscriber: aether
      tenantID: 140793
      tenantCode: rbl
      contactInfo: { "cluster": "aether" }
      transformerJS: |
        "function transform(payload, sender) { var accountHolderObjectType = 'in.zeta.mars'; var cardObjectType = 'Card'; var entityMapping = { 'in.zeta.ruby': 'Account', 'in.zeta.mars': 'AccountHolder', 'Card': 'Card' }; if (!payload.data || !payload.data.objectType) { return ''; } var objectType = payload.data.objectType; var transformedResult = {}; if (objectType.startsWith(accountHolderObjectType)) { transformedResult.entityType = entityMapping[accountHolderObjectType]; transformedResult.entityId = payload.data.objectId; } else if (objectType.startsWith(cardObjectType)) { transformedResult.entityType = entityMapping[cardObjectType]; transformedResult.entityId = payload.data.objectId; } else { return ''; } transformedResult.eventId = payload.eventID; transformedResult.ifiId = payload.data.classificationUnit.tenantId; transformedResult.eventName = payload.name; transformedResult.originTime = payload.origin.time; transformedResult.classificationModelId = payload.data.classificationUnit.classificationModelId; transformedResult.statusValue = payload.data.classificationUnit.code; payload.transformedResult = transformedResult; return JSON.stringify(payload);}"
      config:
        subscriber: aether
        max.retry.count: '3'
        lag.threshold: '3'
        secret: zrn:zeta:delta:140793:SECRET:aether.aether.ATROPOS_WEBHOOK_SECRET
        webhook.auth.crux.app: aether
        webhook.auth.crux.cluster: aether
      webhookRequest: "{ \"method\": \"POST\",\"url\": \"<%=zoneClusterConfig.aetherBaseUrl%>/tenants/140793/<%=zoneClusterConfig.statusChangeWebhookUrl%>\",\"postData\": { \"mineType\": \"application/json\",\"text\": \"<%print(generateRequestBody(payload));%>\" } }"
      blacklistErrorCodes:
        - "4\\d{2}"
    aether-ledger-events-140793-subscription:
      subscriptionType: "WEBHOOK"
      subscriptionID: "subscription_140793_aether_ledger_events"
      crName: "subscription_140793_aether-ledger-events"
      topic: "_tenant_140793_LEDGER"
      eventName: '*'
      subscriber: aether
      tenantID: 140793
      tenantCode: rbl
      contactInfo: { "cluster": "aether" }
      transformerJS: |
        "function transform(payload, sender) {  var data = payload.data;  var authorization = (data && data.authorization) ? data.authorization : null;  var payloadTargetTag = null;  var PATTERN = 'tagTypeCode=classification';  if(authorization && authorization.postingCode === 'replace-ledger-tags') {    payloadTargetTag = (authorization.payload && authorization.payload.targetTag) ? authorization.payload.targetTag : null;  } else if (authorization && authorization.postingCode === 'add-ledger-tags') {    payloadTargetTag =  (authorization.payload && authorization.payload.tags && authorization.payload.tags.length > 0) ? authorization.payload.tags.filter(function (str) { return str.contains(PATTERN); })[0] : null;  }  var statusType = null;  var statusValue = null;  if (payloadTargetTag) {   var tag_part1 = payloadTargetTag.split('?')[0];   if(tag_part1 && tag_part1.length > 1) {   var tag_part2 = tag_part1.split('//');    if(tag_part2 && tag_part2.length > 1) {     statusType = tag_part2[1].split('/')[0];     statusValue = tag_part2[1].split('/')[1];    }   }  }   if (payload && data && authorization && payloadTargetTag && statusType && statusValue && payload.eventID && data.ifiID && data.ledgerID && data.createdAt && payloadTargetTag.contains('tagTypeCode=classification') && (!payloadTargetTag.contains('bundleID='))) {   var transformedResult = {    eventId: payload.eventID,    ifiId: data.ifiID,    eventName: payload.name,    originTime: data.createdAt,    entityType: 'Account',    entityId: data.ledgerID,    statusType: statusType,    statusValue: statusValue,    bookTime: data.formattedBookTime   };   payload.transformedResult = transformedResult;   return JSON.stringify(payload);  } else {   return '';  } }"
      config:
        subscriber: aether
        max.retry.count: '3'
        lag.threshold: '3'
        secret: zrn:zeta:delta:140793:SECRET:aether.aether.ATROPOS_WEBHOOK_SECRET
        webhook.auth.crux.app: aether
        webhook.auth.crux.cluster: aether
      webhookRequest: "{ 'method': 'POST','url': '<%=zoneClusterConfig.aetherBaseUrl%>/tenants/140793/<%=zoneClusterConfig.statusChangeWebhookUrl%>','postData': { 'mineType': 'application/json','text': '<%print(generateRequestBody(payload));%>' } }"
      blacklistErrorCodes:
        - "4\\d{2}"
    aether-bundleStatusDlq-140793-subscription:
      subscriptionType: "WEBHOOK"
      subscriptionID: "subscription_140793_BundleStatusDlq"
      crName: "subscription_140793_aether-bundle-status-dlq"
      topic: "_tenant_140793_BundleStatus_dlq"
      eventName: '*'
      subscriber: aether
      tenantID: 140793
      tenantCode: rbl
      contactInfo: { "cluster": "aether" }
      transformerJS: |
        "function transform(payload, sender) {   if ( !(payload.hasOwnProperty('data') && payload.hasOwnProperty('throwable') && payload.throwable.hasOwnProperty('delegationFailureCause')) ){   return ''; } var transformedResult = {};   transformedResult.eventName = payload.data.payload.name;   transformedResult.originTime = payload.data.payload.origin.time;   transformedResult.eventId = payload.data.payload.data.eventId;   transformedResult.ifiId =  payload.data.payload.data.tenantId;   transformedResult.entityId =  payload.data.payload.data.entityId;   transformedResult.bundleId =  payload.data.payload.data.bundleId;   transformedResult.entityType =  payload.data.payload.data.entityType;   transformedResult.statusType =  payload.data.payload.data.statusType;   transformedResult.statusValue =  payload.data.payload.data.statusValue;   payload.transformedResult = transformedResult;   return JSON.stringify(payload); }"
      config:
        subscriber: aether
        max.retry.count: '3'
        lag.threshold: '3'
        secret: zrn:zeta:delta:140793:SECRET:aether.aether.ATROPOS_WEBHOOK_SECRET
        webhook.auth.crux.app: aether
        webhook.auth.crux.cluster: aether
      webhookURL: "<%=zoneClusterConfig.aetherBaseUrl%>/tenants/140793/<%=zoneClusterConfig.statusChangeDlqWebhookUrl%>"
      blacklistErrorCodes:
        - "4\\d{2}"
    aether-bundleStatus-processing-140793-subscription:
      subscriptionType: "WEBHOOK"
      subscriptionID: "subscription_140793_BundleStatus"
      topic: "_tenant_140793_BundleStatus"
      crName: "subscription_140793_aether-bundle-status"
      eventName: 'BundleStatus_UPDATED'
      subscriber: aether
      tenantID: 140793
      tenantCode: rbl
      contactInfo: { "cluster": "aether" }
      transformerJS: |
        "function transform(payload, sender) { if ( !(payload.hasOwnProperty('data') ) ){   return ''; } var transformedResult = {};  transformedResult.eventName = payload.name;  transformedResult.originTime = payload.origin.time;  transformedResult.eventId = payload.data.eventId;  transformedResult.ifiId = payload.data.tenantId;  transformedResult.entityId = payload.data.entityId;  transformedResult.bundleId = payload.data.bundleId;  transformedResult.entityType = payload.data.entityType;  transformedResult.statusType = payload.data.statusType;  transformedResult.statusValue = payload.data.statusValue;  transformedResult.bookTime = payload.data.bookTime;  payload.transformedResult = transformedResult; return JSON.stringify(payload);}"
      config:
        subscriber: aether
        max.retry.count: '3'
        lag.threshold: '3'
        cronus.bed.code: "aether.aether.BEDZZZZ0001"
        secret: zrn:zeta:delta:140793:SECRET:aether.aether.ATROPOS_WEBHOOK_SECRET
        webhook.auth.crux.app: aether
        webhook.auth.crux.cluster: aether
      webhookRequest: "{ 'method': 'POST','url': '<%=zoneClusterConfig.aetherBaseUrl%>/tenants/140793/<%=zoneClusterConfig.statusChangeWebhookUrl%>','postData': { 'mineType': 'application/json','text': '<%print(generateRequestBody(payload));%>' } }"
      blacklistErrorCodes:
        - "4\\d{2}"
